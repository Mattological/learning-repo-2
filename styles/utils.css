/* reusable media queries for responsiveness
/*extra small
@media (min-width:475px){
    .container{max-width:475px;/*with the media query min-width and container max-width havign the same value, this would ensure 
        that the box shrinks when the viewport touches it on shrinking your browser viewport
        so the container always remains small and fully visible for this size-range
        do the same for all media queries*
@media (min-width:640px){
    .container{max-width:640px;}
}
 medium
@media (min-width:768px){
    .container{max-width:768px;}
}
large 
@media (min-width:1024px){
    .container{max-width:1024px;}
}
 extra large
@media (min-width:1280px){
    .container{max-width:1280px;}
}

@media (min-width:1536px){
    .container{max-width:1536px;}
    note this ensures going to a size larger than this wont pull apart our content no matter how large our screen is */
/*utility classes are for rules or components we use often for example our buttons*/ 
.btn{display:inline-block;
    font-weight: 1000;
    background-color:var(--clr-rose);
    color:#f1f5f9;
    text-decoration:none;
     letter-spacing: -0.05em;
     box-shadow: 0 1px 10px rgba(225,29,72), 0 0 10px rgba(225,29,72), 0 0 50px var(--clr-rose);
    transition:transform 0.3s, box-shadow 0.3s;/*this makes it smoother*/
     background-color: var(--clr-rose );color:var(--clr-light);padding: 0.5em 1em;border-radius:6px;}/*utility class for buttons*/
/*notice the utils.css accesses our defined variables since the styles .css file is also part of main.js It would not do so otherwise*/
.btn:hover{transform:translateY(-3px);
    box-shadow: 0 1px 30px rgba(225,29,72), 0 -2px 10px rgba(225,29,72), 0 0 100px var(--clr-rose);
}
/*note how our container and media queries will work 
is that all styling outside of our media queries(eg. our container) is going to apply default styles and also styles for screens smaller than 475px.
 This framework is called mobile first
 if we wanted to build desktop-first, we would replace min-wdith with max-width and now the styles outside our utility classes would be for screens larger than (our last media query)1536 pixels*/
.container{width:100%;
    /*while we dont encourage percentages here, as size below 475px is too small, but when using our media queries, for anything above 475px it will stop using percentages and only change size at each new media query point*/
margin-left: auto;
margin-right:auto;
padding-left:0.5rem;
padding-right:0.5rem;
/* border:1px solid var(--clr-rose); */
}
.section{
    margin-top:5rem; 
}
.loading{
    filter:blur(40px) grayscale(100%)
/* used when images arent yet in the viewport */
}
.loaded{
    filter:blur(0) grayscale(0);
    transition:0.1s ease-in-out;
/* used when images enter the viewport */
}
/*media queries for responsiveness*/
/*extra small*/
@media (min-width:475px){
    .container{max-width:475px;/*with the media query min-width and container max-width havign the same value, this would ensure 
        that the box shrinks when the viewport touches it on shrinking your browser viewport
        so the container always remains small and fully visible for this size-range
        do the same for all media queries*/}
}
/* small*/
@media (min-width:640px){
    .container{max-width:640px;}
}
/* medium*/
@media (min-width:768px){
    .container{max-width:768px;}
}
/*large */
@media (min-width:1024px){
    .container{max-width:1024px;}
    .section{margin-top:10rem;}
}
/* extra large*/
@media (min-width:1280px){
    .container{max-width:1280px;}
}
/*2Xl*/
@media (min-width:1536px){
    .container{max-width:1536px;}
    /*note this ensures going to a size larger than this wont pull apart our content no matter how large our screen is */
}
